<?php

namespace Axytos\KaufAufRechnung\Adapter;

use Axytos\KaufAufRechnung\Adapter\HashCalculation\HashCalculator;
use Axytos\KaufAufRechnung\Adapter\Information\BasketUpdateInformation;
use Axytos\KaufAufRechnung\Adapter\Information\CancelInformation;
use Axytos\KaufAufRechnung\Adapter\Information\CheckoutInformation;
use Axytos\KaufAufRechnung\Adapter\Information\InvoiceInformation;
use Axytos\KaufAufRechnung\Adapter\Information\PaymentInformation;
use Axytos\KaufAufRechnung\Adapter\Information\RefundInformation;
use Axytos\KaufAufRechnung\Adapter\Information\ShippingInformation;
use Axytos\KaufAufRechnung\Adapter\Information\TrackingInformation;
use Axytos\KaufAufRechnung\Core\InvoiceOrderContextFactory;
use Axytos\KaufAufRechnung\Core\OrderStateMachine;
use Axytos\KaufAufRechnung\Core\Plugin\Abstractions\Information\BasketUpdateInformationInterface;
use Axytos\KaufAufRechnung\Core\Plugin\Abstractions\Information\CancelInformationInterface;
use Axytos\KaufAufRechnung\Core\Plugin\Abstractions\Information\CheckoutInformationInterface;
use Axytos\KaufAufRechnung\Core\Plugin\Abstractions\Information\InvoiceInformationInterface;
use Axytos\KaufAufRechnung\Core\Plugin\Abstractions\Information\PaymentInformationInterface;
use Axytos\KaufAufRechnung\Core\Plugin\Abstractions\Information\RefundInformationInterface;
use Axytos\KaufAufRechnung\Core\Plugin\Abstractions\Information\ShippingInformationInterface;
use Axytos\KaufAufRechnung\Core\Plugin\Abstractions\Information\TrackingInformationInterface;
use Axytos\KaufAufRechnung\Core\Plugin\Abstractions\Model\AxytosOrderStateInfo;
use Axytos\KaufAufRechnung\Core\Plugin\Abstractions\PluginOrderInterface;
use Exception;
use Magento\Sales\Api\Data\OrderInterface;
use Magento\Sales\Api\Data\ShipmentInterface;
use Magento\Sales\Api\Data\CreditmemoInterface;
use Magento\Sales\Api\Data\InvoiceInterface;
use Magento\Sales\Api\OrderRepositoryInterface;
use Magento\Sales\Model\Order;

class PluginOrder implements PluginOrderInterface
{
    /**
     * @var \Axytos\KaufAufRechnung\Adapter\MagentoSalesOrder
     */
    private $magentoSalesOrder;

    /**
     * @var \Axytos\KaufAufRechnung\Core\InvoiceOrderContextFactory
     */
    private $invoiceOrderContextFactory;

    /**
     * @var \Axytos\KaufAufRechnung\Adapter\HashCalculation\HashCalculator
     */
    private $hashCalculator;

    /**
     * @var OrderRepositoryInterface
     */
    private $orderRepository;

    /**
     * @var OrderStateMachine
     */
    private $orderStateMachine;

    /**
     * @param MagentoSalesOrder $magentoSalesOrder
     * @param InvoiceOrderContextFactory $invoiceOrderContextFactory
     * @param HashCalculator $hashCalculator
     */
    public function __construct(
        MagentoSalesOrder $magentoSalesOrder,
        InvoiceOrderContextFactory $invoiceOrderContextFactory,
        HashCalculator $hashCalculator,
        OrderRepositoryInterface $orderRepository,
        OrderStateMachine $orderStateMachine
    ) {
        $this->magentoSalesOrder = $magentoSalesOrder;
        $this->invoiceOrderContextFactory = $invoiceOrderContextFactory;
        $this->hashCalculator = $hashCalculator;
        $this->orderRepository = $orderRepository;
        $this->orderStateMachine = $orderStateMachine;
    }

    /**
     * @return string|int
     */
    public function getOrderNumber()
    {
        $invoiceOrderContext = $this->invoiceOrderContextFactory->getInvoiceOrderContext(
            $this->magentoSalesOrder->getOrder(),
            $this->magentoSalesOrder->getShipment(),
            $this->magentoSalesOrder->getCreditmemo(),
            $this->magentoSalesOrder->getInvoice()
        );
        return $invoiceOrderContext->getOrderNumber();
    }

    /**
     * @return AxytosOrderStateInfo|null
     */
    public function loadState()
    {
        $order = $this->magentoSalesOrder->getOrder();
        $extensionAttributes = $order->getExtensionAttributes();
        /**
         * @phpstan-ignore-next-line because extension interface is generated by magento2
         * @var \Axytos\KaufAufRechnung\Model\Data\AxytosOrderAttributesInterface */
        $axytosOrderAttributes = $extensionAttributes->getAxytosKaufaufrechnungOrderAttributes();
        $state = $axytosOrderAttributes->getOrderState();
        $data = $axytosOrderAttributes->getOrderStateData();
        return new AxytosOrderStateInfo($state, $data);
    }

    /**
     * @param string $state
     * @param string|null $data
     * @return void
     */
    public function saveState($state, $data = null)
    {
        $order = $this->magentoSalesOrder->getOrder();
        $extensionAttributes = $order->getExtensionAttributes();
        /**
         * @phpstan-ignore-next-line because extension interface is generated by magento2
         * @var \Axytos\KaufAufRechnung\Model\Data\AxytosOrderAttributesInterface */
        $axytosOrderAttributes = $extensionAttributes->getAxytosKaufaufrechnungOrderAttributes();
        $axytosOrderAttributes->setOrderState($state);
        if (!is_null($data)) {
            $axytosOrderAttributes->setOrderStateData($data);
        }
        $this->orderRepository->save($order);
    }

    /**
     * @return void
     */
    public function freezeBasket()
    {
        $hash = $this->calculateOrderBasketHash();

        $order = $this->magentoSalesOrder->getOrder();
        $extensionAttributes = $order->getExtensionAttributes();
        /**
         * @phpstan-ignore-next-line because extension interface is generated by magento2
         * @var \Axytos\KaufAufRechnung\Model\Data\AxytosOrderAttributesInterface */
        $axytosOrderAttributes = $extensionAttributes->getAxytosKaufaufrechnungOrderAttributes();
        $axytosOrderAttributes->setOrderBasketHash($hash);
        $this->orderRepository->save($order);
    }

    /**
     * @return CheckoutInformationInterface
     * @throws Exception
     */
    public function checkoutInformation()
    {
        return new CheckoutInformation($this->invoiceOrderContextFactory->getInvoiceOrderContext(
            $this->magentoSalesOrder->getOrder(),
            $this->magentoSalesOrder->getShipment(),
            $this->magentoSalesOrder->getCreditmemo(),
            $this->magentoSalesOrder->getInvoice()
        ));
    }

    /**
     * @return bool
     */
    public function hasBeenCanceled()
    {
        return $this->magentoSalesOrder->getOrder()->getState() === Order::STATE_CANCELED;
    }

    /**
     * @return CancelInformationInterface
     */
    public function cancelInformation()
    {
        return new CancelInformation($this->invoiceOrderContextFactory->getInvoiceOrderContext(
            $this->magentoSalesOrder->getOrder(),
            $this->magentoSalesOrder->getShipment(),
            $this->magentoSalesOrder->getCreditmemo(),
            $this->magentoSalesOrder->getInvoice()
        ));
    }

    /**
     * @return bool
     */
    public function hasBeenInvoiced()
    {
        return !is_null($this->magentoSalesOrder->getInvoice());
    }

    /**
     * @return InvoiceInformationInterface
     */
    public function invoiceInformation()
    {
        return new InvoiceInformation($this->invoiceOrderContextFactory->getInvoiceOrderContext(
            $this->magentoSalesOrder->getOrder(),
            $this->magentoSalesOrder->getShipment(),
            $this->magentoSalesOrder->getCreditmemo(),
            $this->magentoSalesOrder->getInvoice()
        ));
    }

    /**
     * @return bool
     */
    public function hasBeenRefunded()
    {
        return !is_null($this->magentoSalesOrder->getCreditmemo());
    }

    /**
     * @return RefundInformationInterface
     */
    public function refundInformation()
    {
        return new RefundInformation($this->invoiceOrderContextFactory->getInvoiceOrderContext(
            $this->magentoSalesOrder->getOrder(),
            $this->magentoSalesOrder->getShipment(),
            $this->magentoSalesOrder->getCreditmemo(),
            $this->magentoSalesOrder->getInvoice()
        ));
    }

    /**
     * @return bool
     */
    public function hasShippingReported()
    {
        $order = $this->magentoSalesOrder->getOrder();
        $extensionAttributes = $order->getExtensionAttributes();
        /**
         * @phpstan-ignore-next-line because extension interface is generated by magento2
         * @var \Axytos\KaufAufRechnung\Model\Data\AxytosOrderAttributesInterface */
        $axytosOrderAttributes = $extensionAttributes->getAxytosKaufaufrechnungOrderAttributes();

        return $axytosOrderAttributes->getShippingReported();
    }

    /**
     * @return bool
     * @throws Exception
     */
    public function hasBeenShipped()
    {
        return !is_null($this->magentoSalesOrder->getShipment());
    }

    /**
     * @return void
     */
    public function saveHasShippingReported()
    {
        $order = $this->magentoSalesOrder->getOrder();
        $extensionAttributes = $order->getExtensionAttributes();
        /**
         * @phpstan-ignore-next-line because extension interface is generated by magento2
         * @var \Axytos\KaufAufRechnung\Model\Data\AxytosOrderAttributesInterface */
        $axytosOrderAttributes = $extensionAttributes->getAxytosKaufaufrechnungOrderAttributes();
        $axytosOrderAttributes->setShippingReported(true);
        $this->orderRepository->save($order);
    }

    /**
     * @return ShippingInformationInterface
     */
    public function shippingInformation()
    {
        return new ShippingInformation($this->invoiceOrderContextFactory->getInvoiceOrderContext(
            $this->magentoSalesOrder->getOrder(),
            $this->magentoSalesOrder->getShipment(),
            $this->magentoSalesOrder->getCreditmemo(),
            $this->magentoSalesOrder->getInvoice()
        ));
    }

    /**
     * @return bool
     */
    public function hasNewTrackingInformation()
    {
        // not yet supported for magento2
        return false;
    }

    /**
     * @return void
     */
    public function saveNewTrackingInformation()
    {
        // not yet supported for magento2
    }

    /**
     * @return TrackingInformationInterface
     */
    public function trackingInformation()
    {
        // not yet supported for magento2
        return new TrackingInformation($this->invoiceOrderContextFactory->getInvoiceOrderContext(
            $this->magentoSalesOrder->getOrder(),
            $this->magentoSalesOrder->getShipment(),
            $this->magentoSalesOrder->getCreditmemo(),
            $this->magentoSalesOrder->getInvoice()
        ));
    }

    /**
     * @return bool
     */
    public function hasBasketUpdates()
    {
        $order = $this->magentoSalesOrder->getOrder();
        $extensionAttributes = $order->getExtensionAttributes();
        /**
         * @phpstan-ignore-next-line because extension interface is generated by magento2
         * @var \Axytos\KaufAufRechnung\Model\Data\AxytosOrderAttributesInterface */
        $axytosOrderAttributes = $extensionAttributes->getAxytosKaufaufrechnungOrderAttributes();

        $oldHash = $axytosOrderAttributes->getOrderBasketHash();
        $newHash = $this->calculateOrderBasketHash();
        return $newHash !== $oldHash;
    }

    /**
     * @return void
     */
    public function saveBasketUpdatesReported()
    {
        $orderHash = $this->calculateOrderBasketHash();

        $order = $this->magentoSalesOrder->getOrder();
        $extensionAttributes = $order->getExtensionAttributes();
        /**
         * @phpstan-ignore-next-line because extension interface is generated by magento2
         * @var \Axytos\KaufAufRechnung\Model\Data\AxytosOrderAttributesInterface */
        $axytosOrderAttributes = $extensionAttributes->getAxytosKaufaufrechnungOrderAttributes();
        $axytosOrderAttributes->setOrderBasketHash($orderHash);
        $this->orderRepository->save($order);
    }

    /**
     * @return BasketUpdateInformationInterface
     */
    public function basketUpdateInformation()
    {
        return new BasketUpdateInformation($this->invoiceOrderContextFactory->getInvoiceOrderContext(
            $this->magentoSalesOrder->getOrder(),
            $this->magentoSalesOrder->getShipment(),
            $this->magentoSalesOrder->getCreditmemo(),
            $this->magentoSalesOrder->getInvoice()
        ));
    }

    /**
     * @return void
     */
    public function saveHasBeenPaid()
    {
        $order = $this->magentoSalesOrder->getOrder();
        $this->orderStateMachine->setComplete($order);
    }

    /**
     * @return PaymentInformationInterface
     */
    public function paymentInformation()
    {
        return new PaymentInformation($this->invoiceOrderContextFactory->getInvoiceOrderContext(
            $this->magentoSalesOrder->getOrder(),
            $this->magentoSalesOrder->getShipment(),
            $this->magentoSalesOrder->getCreditmemo(),
            $this->magentoSalesOrder->getInvoice()
        ));
    }

    /**
     * @return string
     */
    private function calculateOrderBasketHash()
    {
        $basket = $this->checkoutInformation()->getBasket();
        return $this->hashCalculator->calculateBasketHash($basket);
    }
}
