<?php

declare(strict_types=1);

namespace Axytos\KaufAufRechnung\Core;

use Magento\Sales\Api\OrderRepositoryInterface;
use Axytos\ECommerce\Order\OrderCheckProcessStates;
use Magento\Sales\Api\Data\OrderInterface;

class OrderCheckProcessStateMachine
{
    /**
     * @var \Magento\Sales\Api\OrderRepositoryInterface
     */
    private $orderRepository;

    public function __construct(OrderRepositoryInterface $orderRepository)
    {
        $this->orderRepository = $orderRepository;
    }

    public function getState(string $orderId): ?string
    {
        $order = $this->orderRepository->get(intval($orderId));
        /** @phpstan-ignore-next-line because extension interface is generated by magento2 */
        $currentState = $order->getExtensionAttributes()->getAxytosKaufaufrechnungOrderCheckProcessState();
        return $currentState;
    }

    public function setUnchecked(OrderInterface $order): void
    {
        $this->updateState($order, OrderCheckProcessStates::UNCHECKED);
    }

    public function setChecked(OrderInterface $order): void
    {
        $this->updateState($order, OrderCheckProcessStates::CHECKED);
    }

    public function setConfirmed(OrderInterface $order): void
    {
        $this->updateState($order, OrderCheckProcessStates::CONFIRMED);
    }

    public function setFailed(OrderInterface $order): void
    {
        $this->updateState($order, OrderCheckProcessStates::FAILED);
    }

    private function updateState(OrderInterface $order, string $orderCheckProcessState): void
    {
        $orderAttributes = $order->getExtensionAttributes();
        if (is_null($orderAttributes)) {
            return;
        }
        /** @phpstan-ignore-next-line because extension interface is generated by magento2 */
        $orderAttributes->setAxytosKaufaufrechnungOrderCheckProcessState($orderCheckProcessState);
        $order->setExtensionAttributes($orderAttributes);
        $this->orderRepository->save($order);
    }
}
